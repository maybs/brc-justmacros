
BRC_BUTTON_VIDEO = 16;
BRC_BUTTON_BAND = 15;
BRC_BUTTON_TALK = 14;
BRC_BUTTON_BLACK = 13;
BRC_BUTTON_PROJECT_COMPUTER = 12;
BRC_BUTTON_PROJECT_PROGRAM = 11;
BRC_BUTTON_KEY_ON = 10;
BRC_BUTTON_PREVIEW_COMPUTER = 9;
BRC_BUTTON_PREVIEW_LEFT = 8;
BRC_BUTTON_PREVIEW_CENTER = 7;
BRC_BUTTON_PREVIEW_RIGHT = 6;
BRC_BUTTON_PREVIEW_STAGE = 5;
BRC_BUTTON_PREVIEW_FLOOR = 4;
BRC_BUTTON_AUTO_TRANSITION_ON = 3;
BRC_BUTTON_TRANSITION_AUTO = 2;
BRC_BUTTON_TRANSITION_CUT = 1;

BRC_BUTTON_XK24_VIDEO = 1;
BRC_BUTTON_XK24_BAND = 2;
BRC_BUTTON_XK24_TALK = 3;
BRC_BUTTON_XK24_BLACK = 4;
BRC_BUTTON_XK24_KEY_ON = 5;
BRC_BUTTON_XK24_ALT = 6;
BRC_BUTTON_XK24_PROJECT_SELECT = 7;
BRC_BUTTON_XK24_PROJECT_PROGRAM = 8;
BRC_BUTTON_XK24_PROJECTORS_UNBLANK = 9;
BRC_BUTTON_XK24_PROJECTORS_ON = 11;
BRC_BUTTON_XK24_CAMS_ON = 12;
BRC_BUTTON_XK24_PREVIEW_COMPUTER = 13;
BRC_BUTTON_XK24_PREVIEW_KEYS = 14;
BRC_BUTTON_XK24_PREVIEW_DRUMS = 15;
BRC_BUTTON_XK24_AUTO_TRANSITION_ON = 16;
BRC_BUTTON_XK24_TRANSITION_AUTO = 17;
BRC_BUTTON_XK24_TRANSITION_CUT = 18;
BRC_BUTTON_XK24_PREVIEW_LEFT = 19;
BRC_BUTTON_XK24_PREVIEW_CENTER = 20;
BRC_BUTTON_XK24_PREVIEW_RIGHT = 21;

BRC_CAMERA_CONTROLLER_IP = "10.0.1.220";
BRC_CAMERA_IP_LEFT = "10.0.1.201";
BRC_CAMERA_IP_CENTER = "10.0.1.202";
BRC_CAMERA_IP_RIGHT = "10.0.1.203";
BRC_CAMERA_NUMBER_LEFT = 1;
BRC_CAMERA_NUMBER_CENTER = 2;
BRC_CAMERA_NUMBER_RIGHT = 3;

BRC_PROJECTOR_IP_LEFT = "10.0.1.100";
BRC_PROJECTOR_IP_RIGHT = "10.0.1.101";

-- -----------------------------------------------------------------------------------------------------------------------
-- ATEM input mapping:
-- 1 = black
-- 2 = in 1
-- 3 = in 2
-- 4 = in 3
-- 5 = in 4
-- 6 = in 5
-- 7 = in 6
-- 8 = in 7
-- 9 = in 8
-- 10 = color bars
-- 11 = color 1
-- 12 = color 2
-- 13 = media player 1
-- 14 = media player 1 key
-- 15 = media player 2
-- 16 = media player 2 key
-- 17 = key 1 mask
-- 18 = dsk 1 mask
-- 19 = dsk2 mask
-- 20 = clean feed 1
-- 21 = clean feed 2
-- 22 =
-- 23 = program
-- 23 = preview
-- -----------------------------------------------------------------------------------------------------------------------
BRC_INPUT_CAMERA_CENTER = 6;
BRC_INPUT_CAMERA_FLOOR = 2;
BRC_INPUT_CAMERA_LEFT = 7;
BRC_INPUT_CAMERA_RIGHT = 9;
BRC_INPUT_CAMERA_STAGE = 8;
BRC_INPUT_CAMERA_WIDE = 3;
BRC_INPUT_COMPUTER_MASTER = 4;
BRC_INPUT_COMPUTER_SLAVE = 5;
BRC_INPUT_PROGRAM = 23;
BRC_AUDIO_RCA = 9;

BRC_INPUT_BUTTON = {
  [BRC_INPUT_CAMERA_CENTER] = BRC_BUTTON_PREVIEW_CENTER,
  [BRC_INPUT_CAMERA_FLOOR] = BRC_BUTTON_PREVIEW_FLOOR,
  [BRC_INPUT_CAMERA_LEFT] = BRC_BUTTON_PREVIEW_LEFT,
  [BRC_INPUT_CAMERA_RIGHT] = BRC_BUTTON_PREVIEW_RIGHT,
  [BRC_INPUT_CAMERA_STAGE] = BRC_BUTTON_PREVIEW_STAGE,
  [BRC_INPUT_COMPUTER_MASTER] = BRC_BUTTON_PREVIEW_COMPUTER,
  [BRC_INPUT_PROGRAM] = BRC_BUTTON_PROJECT_PROGRAM
};

BRC_INPUT_BUTTON_XK24 = {
  [BRC_INPUT_CAMERA_CENTER] = BRC_BUTTON_XK24_PREVIEW_CENTER,
  [BRC_INPUT_CAMERA_FLOOR] = BRC_BUTTON_XK24_PREVIEW_FLOOR,
  [BRC_INPUT_CAMERA_LEFT] = BRC_BUTTON_XK24_PREVIEW_LEFT,
  [BRC_INPUT_CAMERA_RIGHT] = BRC_BUTTON_XK24_PREVIEW_RIGHT,
  [BRC_INPUT_CAMERA_STAGE] = BRC_BUTTON_XK24_PREVIEW_DRUMS,
  [BRC_INPUT_COMPUTER_MASTER] = BRC_BUTTON_XK24_PREVIEW_COMPUTER,
  [BRC_INPUT_PROGRAM] = BRC_BUTTON_XK24_PROJECT_PROGRAM
};

BRC_INPUT_CAMERA_NUMBER = {
  [BRC_INPUT_CAMERA_CENTER] = BRC_CAMERA_NUMBER_CENTER,
  [BRC_INPUT_CAMERA_LEFT] = BRC_CAMERA_NUMBER_LEFT,
  [BRC_INPUT_CAMERA_RIGHT] = BRC_CAMERA_NUMBER_RIGHT
};

BRC_ALT_BUTTONS = { BRC_BUTTON_XK24_ALT, BRC_BUTTON_XK24_PROJECTORS_UNBLANK,
                    BRC_BUTTON_XK24_PROJECTORS_ON, BRC_BUTTON_XK24_CAMS_ON };
BRC_PREVIEW_BUTTONS = { BRC_BUTTON_PREVIEW_CENTER, BRC_BUTTON_PREVIEW_COMPUTER, BRC_BUTTON_PREVIEW_FLOOR,
                        BRC_BUTTON_PREVIEW_LEFT, BRC_BUTTON_PREVIEW_RIGHT, BRC_BUTTON_PREVIEW_STAGE };
BRC_PROJECT_BUTTONS = { BRC_BUTTON_PROJECT_COMPUTER, BRC_BUTTON_PROJECT_PROGRAM };
BRC_SCENE_BUTTONS = { BRC_BUTTON_BAND, BRC_BUTTON_BLACK, BRC_BUTTON_TALK, BRC_BUTTON_VIDEO };

BRC_PREVIEW_XK24_BUTTONS = { BRC_BUTTON_XK24_PREVIEW_CENTER, BRC_BUTTON_XK24_PREVIEW_COMPUTER,
                             BRC_BUTTON_XK24_PREVIEW_DRUMS, BRC_BUTTON_XK24_PREVIEW_KEYS,
                             BRC_BUTTON_XK24_PREVIEW_LEFT, BRC_BUTTON_XK24_PREVIEW_RIGHT };
BRC_SCENE_XK24_BUTTONS = { BRC_BUTTON_XK24_BAND, BRC_BUTTON_XK24_BLACK, BRC_BUTTON_XK24_TALK, BRC_BUTTON_XK24_VIDEO };
BRC_CAMERA_IPS = { BRC_CAMERA_IP_LEFT, BRC_CAMERA_IP_CENTER, BRC_CAMERA_IP_RIGHT };
BRC_PROJECTOR_IPS = { BRC_PROJECTOR_IP_LEFT, BRC_PROJECTOR_IP_RIGHT };

function BRCMapInputToButton(input)
  return input and BRC_INPUT_BUTTON[input] or nil;
end;

function BRCMapInputToXk24Button(input)
  return input and BRC_INPUT_BUTTON_XK24[input] or nil;
end;

function BRCMapInputToCameraNumber(input)
  return input and BRC_INPUT_CAMERA_NUMBER[input] or nil;
end;

function BRCCameraControllerSelectCamera(cameraNumber)
    if cameraNumber then
      HTTPGet( "http://" .. BRC_CAMERA_CONTROLLER_IP .. "/cgi-bin/aw_cam?cmd=XCN:01:" .. cameraNumber .. "&res=1" );
    end;
end;

function BRCCameraGetIris(cameraIp)
  local response = HTTPGet( "http://" .. cameraIp .. "/cgi-bin/aw_ptz?cmd=%23GI" .. "&res=1" );
  local irisValue = string.match(response, 'gi(%x%x%x)');
  return irisValue;
end;

function BRCCameraIris(cameraIp, irisValue)
  HTTPGet( "http://" .. cameraIp .. "/cgi-bin/aw_ptz?cmd=%23AXI" .. irisValue .. "&res=1" );
end;

function BRCCameraPower(power)
  local powerOn = power and "1" or "0";
  for i, cameraIp in ipairs( BRC_CAMERA_IPS ) do
    HTTPGet( "http://" .. cameraIp .. "/cgi-bin/aw_ptz?cmd=%23O" .. powerOn .. "&res=1" );
  end;
end;

function BRCCameraPreset(cameraIp, pageNumber, presetNumber)
    local preset = (pageNumber - 1) * 10 + (presetNumber - 1)
    HTTPGet( "http://" .. cameraIp .. "/cgi-bin/aw_ptz?cmd=%23R" .. preset .. "&res=1" );
end;

function BRCCameraTally()
    local cameraNumber = EnviroRead( "BRC_PREVIEW_CAMERA" ) or 0;
    for i, cameraIp in ipairs( BRC_CAMERA_IPS ) do
        local tallyOn = i == cameraNumber and "1" or "0";
        HTTPGet( "http://" .. cameraIp .. "/cgi-bin/aw_ptz?cmd=%23DA" .. tallyOn .. "&res=1" );
    end;
end;

function BRCFinishActiveTransition ()
    if EnviroRead( "BRC_DEBUG_ATEM" ) ~= "TRUE" and ATEMMixerCount() > 0 and ATEMMixerMEGetTransitionStatusActive( 1, 1 ) then
        ATEMMixerMECut( 1, 1 );
        Sleep( 60 );
    end;
end;

function BRCPreview(button, xk24Button, input, autoTransition)
    if EnviroRead( "BRC_DEBUG_ATEM" ) ~= "TRUE" and ATEMMixerCount() > 0 then
        ATEMMixerMESetPreviewInput( 1, 1, input );
    else
        VSLog("Set preview to input " .. input);
    end;

    EnviroWrite( "BRC_PREVIEW_CAMERA", BRCMapInputToCameraNumber( input ) or 0 );

    if autoTransition then
        BRCFinishActiveTransition();
        BRCTransition( autoTransition, EnviroRead( "BRC_KEY_ON" ) == "TRUE" );
    end;
end;

function BRCProject(button, input)
    if EnviroRead( "BRC_DEBUG_ATEM" ) ~= "TRUE" and ATEMMixerCount() > 0 then
        ATEMMixerAUXSetInput( 1, 1, input );
    else
        VSLog("Set AUX1 output to input " .. input);
    end;
end;

function BRCProjectorBlank(blank)
  local command = blank and
    { 0xbe, 0xef, 0x03, 0x06, 0x00, 0x6b, 0xd9, 0x01, 0x00, 0x20, 0x30, 0x01, 0x00 } or
    { 0xbe, 0xef, 0x03, 0x06, 0x00, 0xfb, 0xd8, 0x01, 0x00, 0x20, 0x30, 0x00, 0x00 };

    BRCProjectorSendCommand( command );
end;

function BRCProjectorSendCommand(command)
  if RawCommsNetworkConnectionCount() > 0 then
    RawCommsNetRemoveConnection( RawCommsNetGetUniqueID ( 1 ) );
  end;
  for i, projectorIp in ipairs ( BRC_PROJECTOR_IPS ) do
    local socketId = RawCommsNetAddConnection( projectorIp, 23, "TCP",
      "BRC_GenericCommsIpEvents", "ConnectedToServer", "DisconnectedFromServer" );
    RawCommsNetSetEnabled( socketId, "TRUE" );
    VSLog( "New connection to " .. projectorIp .. " with ID: " .. socketId );
    RawCommsNetSendPacket( socketId, unpack( command ) );
    local start = tonumber( GetTickCount() );
    while RawCommsNetGetTXQueueCount( socketId ) > 0 do
      if (tonumber( GetTickCount() ) - start) > 5000 then
        VSLog("timed out trying to send command to projector " .. projectorIp );
        break;
      end;
      Sleep(50);
    end;
    RawCommsNetSetEnabled( socketId, "FALSE" );
    RawCommsNetRemoveConnection( socketId );
  end;
end;

function BRCProjectorPower(power)
  local command = power and
    { 0xbe, 0xef, 0x03, 0x06, 0x00, 0xba, 0xd2, 0x01, 0x00, 0x00, 0x60, 0x01, 0x00 } or
    { 0xbe, 0xef, 0x03, 0x06, 0x00, 0x2a, 0xd3, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00 };

  BRCProjectorSendCommand( command );
end;

function BRCSetBlueLEDs (xkeyId, buttonStates)
  if xkeyId > 0 then
    for button, on in pairs( buttonStates ) do
      if button then
        XKeysSetButtonBlueLEDState( xkeyId, button, on and "TRUE" or "FALSE" );
      end;
    end;
  end;
end;

function BRCSetRedLEDs (xkeyId, buttonStates)
  if xkeyId > 0 then
    for button, on in pairs( buttonStates ) do
      if button then
        XKeysSetButtonRedLEDState( xkeyId, button, on and "TRUE" or "FALSE" );
      end;
    end;
  end;
end;

function BRCTransition (type, wantKey)
    local atemConnected = ATEMMixerCount() > 0;
    local keyIsOn = atemConnected and ATEMMixerMEKeyGetOnAir( 1, 1, 1 ) or
            not atemConnected and EnviroRead( "BRC_KEY_ON" ) == "TRUE";
    local transitionLayers;
    if keyIsOn and wantKey or not keyIsOn and not wantKey then
        transitionLayers = 'BACKGROUND';
    else
        transitionLayers = 'BACKGROUND, KEY1';
    end;

    local brcKeyOn = wantKey and "TRUE" or "FALSE";
    EnviroWrite( "BRC_KEY_ON", brcKeyOn );

    BRCCameraTally();

    if EnviroRead( "BRC_DEBUG_ATEM" ) ~= "TRUE" and atemConnected then
        ATEMMixerMESetNextTransitionLayers( 1, 1, transitionLayers );

        if ATEMMixerMEGetFadedToBlack( 1, 1 ) then
            ATEMMixerMECut( 1, 1 );
            Sleep( 60 );
            ATEMMixerMEFadeToBlack( 1, 1 );
        elseif type == "cut" then
            ATEMMixerMECut( 1, 1 );
        else
            ATEMMixerMEAutoTransition( 1, 1 );
        end;
    else
        VSLog("Transition " .. transitionLayers .. " using " .. type .. ".  Key will be " .. (wantKey and "ON" or "OFF") .. ".");
    end;
end;
